generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  OWNER
  MEMBER
}

enum SystemRole {
  SYSTEM_ADMIN
  TECH_SUPPORT
  USER
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ParticipantStatus {
  ENROLLED    // Signed up for the program
  IN_PROGRESS // Started day 1 of the program
  COMPLETED
  DROPPED
}

enum StageStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum TaskStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum TaskType {
  READING
  VIDEO
  QUIZ
  ASSIGNMENT
  MEETING
  SHADOWING
  PRACTICE
  CERTIFICATION
  COACHING
  TRAINING
  NETWORKING
  RESEARCH
  OTHER
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum AuditLogAction {
  TASK_STARTED
  TASK_COMPLETED
  TASK_SKIPPED
  STAGE_STARTED
  STAGE_COMPLETED
  STAGE_SKIPPED
  PROGRAM_ENROLLED
  PROGRAM_STARTED
  PROGRAM_COMPLETED
  PROGRAM_DROPPED
}


model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String    @id @default(uuid())
  name                   String
  email                  String    @unique
  emailVerified          DateTime?
  password               String?
  image                  String?
  systemRole             SystemRole @default(USER)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now())
  invalid_login_attempts Int       @default(0)
  lockedAt               DateTime?

  teamMembers TeamMember[]
  accounts    Account[]
  sessions    Session[]
  invitations Invitation[]
  programUsers ProgramUser[]
  programAssignments ProgramUser[] @relation("ProgramAssigner")
  auditLogs AuditLog[] // Audit logs where this user performed actions
}

model Team {
  id              String       @id @default(uuid())
  name            String
  slug            String       @unique
  domain          String?      @unique
  defaultRole     Role         @default(MEMBER)
  billingId       String?
  billingProvider String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  members         TeamMember[]
  invitations     Invitation[]
  apiKeys         ApiKey[]
  programs        Program[]

  @@index([billingId])
}

model Program {
  id                    String   @id @default(uuid())
  name                  String   // Program name
  subtitle              String?  // Program subtitle
  description           String?  // Program description
  teamId                String   // Which team owns this program
  status                ProgramStatus @default(DRAFT)
   
  // Performance optimization
  totalStages           Int      @default(0) // Calculated field for performance
  
  // Lifecycle
  deletedAt             DateTime? // Soft delete timestamp
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  
  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  participants ProgramUser[] // Individual participants
  stages Stage[] // Stages within this program
  
  @@index([teamId])
  @@index([status])
}

model ProgramUser {
  id          String   @id @default(uuid())
  programId   String
  userId      String
  status      ParticipantStatus @default(ENROLLED)
  assignedBy  String   // Who assigned them (Program Manager, Hiring Manager, etc.)
  assignedAt  DateTime @default(now())  // Keep DateTime for audit trail
  startedAt   DateTime?  // Keep DateTime for audit trail
  completedAt DateTime?  // Keep DateTime for audit trail
  notes       String?  // Additional notes about participation
  
  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User @relation("ProgramAssigner", fields: [assignedBy], references: [id])
  userProgress UserProgress[] // Progress tracking for this program user
  auditLogs AuditLog[] // Audit trail for this program user
  
  @@unique([programId, userId])
  @@index([programId])
  @@index([userId])
  @@index([assignedBy])
  @@index([status])
}

model Stage {
  id          String   @id @default(uuid())
  name        String   // Stage name (e.g., "Week 1: Foundation")
  description String?  // Stage description
  order       Int      // Order within the program or parent stage (fixed naming consistency)
  status      StageStatus @default(DRAFT)
  programId   String   // Which program this stage belongs to
  parentId    String?  // Parent stage for hierarchical structure
  
  // Timeline
  expectedDuration  Int?     // Expected number of calendar days to complete stage
  
  desiredOutcomes    String[] // Business goals and outcomes for this stage
  
  // Metadata
  deletedAt   DateTime? // Soft delete timestamp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  
  // Relations
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  parent  Stage?  @relation("StageHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Stage[] @relation("StageHierarchy")
  tasks   Task[]  // Tasks within this stage
  userProgress UserProgress[] // Progress tracking for this stage
  auditLogs AuditLog[] // Audit logs for this stage
  
  @@index([programId])
  @@index([parentId])
  @@index([order])
  @@index([status])
}

model Task {
  id          String   @id @default(uuid())
  name        String   // Task name (e.g., "Complete CRM Training")
  description String?  // Task description
  order       Int      // Order within the stage
  status      TaskStatus @default(DRAFT)
  type        TaskType @default(OTHER)
  stageId     String   // Which stage this task belongs to
  
  // Content and resources
  instructions String?  // Detailed instructions
  resources    Json?    // Links, documents, videos (structured JSON)
  attachments  String[] // File attachments
  
  // Timeline and effort
  estimatedDuration Int?     // Duration in minutes (expected effort, not calendar dates)
  
  // Completion and verification
  autoComplete      Boolean  @default(false) // Can be auto-completed
    
  // Outcome tracking
  taskTarget Json? // Target values for this task (funnel progression or competency building)
  
  // Metadata
  deletedAt   DateTime? // Soft delete timestamp
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  
  // Relations
  stage Stage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  userProgress UserProgress[] // Progress tracking for this task
  auditLogs AuditLog[] // Audit logs for this task
  
  @@index([stageId])
  @@index([order])
  @@index([type])
  @@index([status])
}

model UserProgress {
  id            String   @id @default(uuid())
  programUserId String   // Links to ProgramUser
  stageId       String?  // Optional - for stage-level progress
  taskId        String?  // Optional - for task-level progress
  status        ProgressStatus @default(NOT_STARTED)
  
  // Timing
  startedAt     DateTime?
  completedAt   DateTime?
  actualDuration Int?    // Actual duration in minutes (calculated)
  
  // Progress details
  notes         String?  // Additional notes about progress
  score         Int?     // For quizzes/assessments
  feedback      String?  // Feedback from managers/reviewers
  
  // Outcome tracking
  taskActuals Json?   // Actual metrics achieved for this specific progress record
  
  // Metadata
  deletedAt     DateTime? // Soft delete timestamp
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  
  // Relations
  programUser ProgramUser @relation(fields: [programUserId], references: [id], onDelete: Cascade)
  stage       Stage?      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  task        Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  // Constraints: Must have either stageId OR taskId, but not both
  // Note: Validation handled at application level
  @@unique([programUserId, stageId, taskId])
  @@index([programUserId])
  @@index([stageId])
  @@index([taskId])
  @@index([status])
  @@index([completedAt])
}

model AuditLog {
  id            String   @id @default(uuid())
  programUserId String   // Links to ProgramUser
  action        AuditLogAction
  stageId       String?  // Optional - for stage-level actions
  taskId        String?  // Optional - for task-level actions
  performedBy   String   // Who performed the action (user ID)
  
  // Action details
  previousStatus ProgressStatus? // Previous status before action
  newStatus      ProgressStatus? // New status after action
  notes          String?         // Additional context about the action
  
  // Metadata
  createdAt      DateTime @default(now())
  
  // Relations
  programUser ProgramUser @relation(fields: [programUserId], references: [id], onDelete: Cascade)
  stage       Stage?      @relation(fields: [stageId], references: [id], onDelete: Cascade)
  task        Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  performer   User        @relation(fields: [performedBy], references: [id])
  
  @@index([programUserId])
  @@index([action])
  @@index([createdAt])
  @@index([stageId])
  @@index([taskId])
  // Note: Action validation handled at application level
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  deletedAt DateTime? // Soft delete timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id             String   @id @default(uuid())
  teamId         String
  email          String?
  role           Role     @default(MEMBER)
  token          String   @unique
  expires        DateTime
  invitedBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  sentViaEmail   Boolean  @default(true)
  allowedDomains String[] @default([])

  user User @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@index([email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model Subscription {
  id         String    @id
  customerId String
  priceId    String
  active     Boolean   @default(false)
  startDate  DateTime
  endDate    DateTime
  cancelAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([customerId])
}

model Service {
  id          String   @id @default(uuid())
  description String
  features    String[]
  image       String
  name        String
  created     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  Price       Price[]
}

model Price {
  id            String   @id @default(uuid())
  billingScheme String
  currency      String
  serviceId     String
  amount        Int?
  metadata      Json
  type          String
  created       DateTime

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model jackson_store {
  key        String    @id(map: "_jackson_store_key") @db.VarChar(1500)
  value      String
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  modifiedAt DateTime? @db.Timestamp(6)
  namespace  String?   @db.VarChar(256)

  jackson_index jackson_index[]

  @@index([namespace], map: "_jackson_store_namespace")
  @@ignore
}

model jackson_index {
  id       Int    @id(map: "_jackson_index_id") @default(autoincrement())
  key      String @db.VarChar(1500)
  storeKey String @db.VarChar(1500)

  store jackson_store @relation(fields: [storeKey], references: [key], onDelete: Cascade, onUpdate: NoAction)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
  @@ignore
}

model jackson_ttl {
  key       String @id(map: "jackson_ttl_key") @db.VarChar(1500)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
  @@ignore
}
